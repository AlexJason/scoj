extends layout/template.pug

block css
    link(rel='stylesheet', href='/css/util.css')
    link(rel='stylesheet', href='/css/problem.css')
    link(rel='stylesheet', href='/css/tag.css')
    link(rel='stylesheet', href='/css/markdown.css')
    link(rel='stylesheet', data-name='vs/editor/editor.main', href='/monaco-editor/min/vs/editor/editor.main.css')
    link(rel='stylesheet', href='/katex/dist/katex.min.css')

block js
    script(src='/showdown/dist/showdown.min.js')
    script(src='/showdown-katex/dist/showdown-katex.min.js')
    script.
        var require = { paths: {
            'vs': '/monaco-editor/min/vs'
        }};
    script(src='/monaco-editor/min/vs/loader.js')
    script(src='/monaco-editor/min/vs/editor/editor.main.js')
    script(src='/monaco-editor/min/vs/editor/editor.main.nls.js')

block content
    div.problem-head.card
        p.problem-title #{problem.pid} #{problem.title}
    div.problem-info.card
        p.problem-info-title 题目背景
        div#problem-background #{problem.info.background}
        p.problem-info-title 题目描述
        div#problem-description #{problem.info.description}
        p.problem-info-title 输入格式
        div#problem-input #{problem.info.input}
        p.problem-info-title 输出格式
        div#problem-output #{problem.info.output}
        p.problem-info-title 输入输出样例
        - for (let i = 0; i < problem.info.sample.length; ++i)
            p.problem-info-subtitle 输入样例##{i + 1}
            p #{problem.info.sample[i].input}
            p.problem-info-subtitle 输出样例##{i + 1}
            p #{problem.info.sample[i].output}
    div.problem-upload.card
        p.problem-info-title 提交代码
        form#judge-text
            input(type='hidden', name='type', value='text')
            input(type='hidden', name='pid', value=problem.pid)
            select(name='lang', onchange='ideChangeLanguage(this.value)')
                option(value='cpp98') C++98
                option(value='cpp11') C++11
                option(value='cpp17') C++17
                option(value='cpp20') C++20
                option(value='js') JavaScript
                option(value='scratch3') Scratch 3
            div#ide.problem-ide
            input(type='button', value='提交', onclick='submitJudgeText()')
        p.problem-info-title 提交文件
        form#judge-file
            input(type='hidden', name='type', value='file')
            input(type='hidden', name='pid', value=problem.pid)
            select(name='lang')
                option(value='cpp98') C++98
                option(value='cpp11') C++11
                option(value='cpp17') C++17
                option(value='cpp20') C++20
                option(value='js') JavaScript
                option(value='scratch3') Scratch 3
            div.util-button-file
                input(type='button', value='上传代码')
                input(type='file', name='file')
            input(type='button', value='提交', onclick='submitJudgeFile()')

block script
    script.
        const converter = new showdown.Converter({
            extensions: [
                showdownKatex({
                    throwOnError: true,
                    delimiters: [
                        { left: '$$', right: '$$', display: true },
                        { left: '$', right: '$', display: false }
                    ]
                })
            ]
        });

        let codeEditor = monaco.editor.create(document.getElementById('ide'), {
            value: [
                '#include <iostream>',
                '',
                'int main() {',
                '    return 0;',
                '}',
                ''
            ].join('\n'),
            language: 'cpp'
        });

        const supportedLanguage = {
            'cpp98': 'cpp',
            'cpp03': 'cpp',
            'cpp11': 'cpp',
            'cpp14': 'cpp',
            'cpp17': 'cpp',
            'cpp20': 'cpp',
            'js': 'javascript',
            'scratch': 'other'
        };

        const renderElementId = [
            'problem-background',
            'problem-description',
            'problem-input',
            'problem-output'
        ];

        function ideChangeLanguage(lang) {
            let langName = supportedLanguage[lang];
            if (langName != 'other') {
                monaco.editor.setModelLanguage(codeEditor.getModel(), langName)
            }
            else {
                // other IDE
            }
        }

        function getFormData(form_id) {
            const form = document.getElementById(form_id);
            let data = {};
            const inputs = form.getElementsByTagName('input');
            for (let i in inputs) data[inputs[i].name] = inputs[i].value;
            const selects = form.getElementsByTagName('select');
            for (let i in selects) data[selects[i].name] = selects[i].value;
            return data;
        }

        function submitJudgeText() {
            let xhr = new XMLHttpRequest();
            xhr.open('post', '/api/v1/judge', true);
            xhr.setRequestHeader('Content-type', 'application/json');
            xhr.onreadystatechange = () => {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    const res = JSON.parse(xhr.responseText);
                    if (res.code === 200) {
                        window.location.href = `/submission/${res.data.sid}`;
                    }
                }
            };
            xhr.send(JSON.stringify(getFormData('judge-text')));
        }

        function submitJudgeFile() {
            let xhr = new XMLHttpRequest();
            xhr.open('post', '/api/v1/judge', true);
            //xhr.setRequestHeader('Content-type', 'multipart/form-data');
            xhr.onreadystatechange = () => {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    const res = JSON.parse(xhr.responseText);
                    if (res.code === 200) {
                        window.location.href = `/submission/${res.data.sid}`;
                    }
                }
            };
            xhr.send(new FormData(document.getElementById('judge-file')));
        }

        function renderMarkdown() {
            for (let item of renderElementId) {
                let ele = document.getElementById(item);
                ele.innerHTML = converter.makeHtml(ele.innerHTML);
            }
        }

        window.addEventListener('load', () => renderMarkdown());
